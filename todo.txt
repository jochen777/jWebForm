
 * - submit button (OK)
 * - simple input-element (OK)
 * - validate elements (OK)
 * - preset elements (OK)
 * - elements should expose a model (OK)
 *  check if complete form is valid (OK)
 * - Formvalidator (OK)
 * - tabindex(OK)
 * placeholder (OK)
 * - komplex input-form (OK)
  * set internal value (OK)
  * validate date (OK)
  * korrect validation-display for date (OK)
 
 * - xsrf (OK)
 
 * - firstRun? / * - form-id (mehrere forms pro Seite!. Entscheidung: edited=1 oder form-element-ids. (Symfony: form-element-ids - vielleicht diese optional machen - also nur einsetzen, wenn zwei Forms am start sind?) (OK)
 
 * Refactor and extend test (date, xsrf-protection) (OK)
 * idee: Die GetHTML Methode bekommt erst den Request und macht dann das nötige. nicht schon der Konstruktor. (OK)
 * Idee: ElementResult bekommt nicht html-string, sondern render-objekt (OK)
 
 * Everything immutable! (OK)
 * test 2 forms on the same page. (OK)
 * REFACTORINGS!! (RenderHints (OK), Decoration (OK))
 * fix form-result (OK)
 * could Element be immutable or the others too? (OK)
 * introduce HTMLProducer and avoid two loops over elements (OK)
 
 * never use null (OK)
 * introduce performance-tests (OK)
 * avoid Tabindex interface (OK)
 * Builder for ElementResult and theme just in Form (not in PrepareInfos) (OK)
 * run should not return html but a "HTMLRenderer" that renders the html in case we want it (OK)
  * - different themes: via: Each element has a hash of renderers. Hash has always "default", but can have more (bootstrap, mobile...) (OK)
 *   - you can add a set of renderers to a form to style differently (OK)
 * Provide clean values (LocalDate, boolean, integer...) (OK)
 -> Idee1: Return extended ElementResults with an extra field for the correct data
 -> Idee2: Versuche das End-API zu formulieren, vielleicht folgt dann das korrekt ergebnis
 -> element - nicht mehr immutable (** das ist wahrscheinlich am besten!)
 -> Ergebnis-Holder
 -> object in addition to value in ElementResult with cast
* 
 * fix form-result finally ( hat viel zu viele Elemente! -> Idee: jedes Element hat unveränderliche Werte (z.B. tabindexincr.) diese Gruppieren und als objekt zurückliefern) (OK)
 * Do we need Themeable Interface at all? Reicht es nicht, den Render-Key zurückzugeben? Und wenn beim Rendern ein Key gefunden wird, wird der HTMLRenderer im Theme verwendet. (OK)
 * decide if we need raw object in ElementResult. so instead of "String value" -> Object value; -> NO
 * More Form-Elements (
 Select (OK)
 , checkbox, (OK)
 Label (OK)
 html, (OK)
 hidden, (OK)
 textArea, (OK)
 Number, (OK)
 Passwort, (OK)
 radio, (OK)
 fileupload, (OK) 
 )
 * vernünftige code-formating regeln (OK)
 * decide if XXXElement or XXXInput or XXX and rename consistent (.net: Ohne, php: xxType, formchecker: Input) (OK)
 * Idee: Replace Element with Function<t,i> from java.util.function (OK)
 * test new elements
 * alle elemente mit vernünftigem Bootstrap-Theme ausgeben (OK)
 * Warning, wenn zweimal der gleiche Name eines Elements einem Form hinzugegügt wird. Exception!! (OK)
 * Führe valueData als Objekt im Result ein. (und elemeniere die Zugriffe auf das Element) (OK)
 * neue Exeption for double element (OK)
 * number testen (OK)
 * leere Namen korrekt abfangen, elemente können leere Namen haben. (OK)
* elements can have an empty name, if they don't have a representation! (OK) 
* get rid of extends in form-elements by introducing general oneElementStyle helper Class (OK)
* better abstraction in ThemeRenderer (OK)
* nur noch ein renderer für default. -> Theme bekommt den StandardRenderer als Hilfe. (OK)
* ElementRenderer noch einfacher machen und Bootstrap davon ableiten. -> Nein. Bootstrap IST default. OK
-> perhaps we should add an elementContainer to the form. The container holds the element, the behaviour and the validation (OK)
 * Idee: könnte validation unabhängig von den Elementen stattfinden? Die validation erfolgt dann nur auf dem Value. Dafür neues Objekt einführen: ValidatedElement<Element, Validtor> (OK) 
* ProducerInput soll Source und Validation und Behaviour bekommen. Also eigentlich ElementContainer (OK)
* ElementResult braucht noch source? (OK)
* Behaviour, dass "*" an das Label macht (OK)
* Automatische (*) bei Required feldern. (OK)
* globale Behaviours (OK)
 * Behaviour braucht auch die Validations (OK)
 * bahaviour should be interface (OK)
 * Behaviour sollte immer in Listenform ankommen. (OK)
* - maxLen (via request??) (OK)
* change method if fileupload is used (Element kann Flag-Interface implementieren. Wenn das gesetzt ist, wird die Methode geändert) (OK)
 * Achtung: Wenn man Eine Form abschickt (Submitted=true) ober nicht alle Felder übermittelt, kommt es zu NPE (OK)
 * In form and in Formresult: do we need Map<Element, ElementResult>? Or can we live with a List<ElementResult>? (NO, leave it like it is)
 * trim? (OK)
 * translations (OK)
 *  MAxlen, required muessen sich in inputfields wiederfinden (OK)
 * check, ob security-violations drin sind
 * select with groups (OK)
 * introduce more protected (OK)
* date-select with dropdowns (OK)
 #############################
 
 * Fix test. Read file in a better way.
 * Make BootstrapRenderer more generic, so it can be easly subclassed. Include start/end as well. Get rid of startEndRenderer? 
 * align 1:1 output with formchecker
 * mehr themes einführen (twocolumn, material)
 * explorable api (form.addText, form.addTextArea
 * move classes to right packages
 
######################## V 0.1
 
* Warning, if no element is required. (This will not make sense!)
* Speed-Optimierung: Wrap should work with StringBuilder
 * evtl. einen EmailType einführen? Wie ist die Browserkompatibiltät?
 * Idee: Methode, die ein Javascript ausgibt, die das Formular validiert
 
 * Kann StaticElementInfo auch als Eingabe für die Elemente verwendet werden?
 * evtl. staticElmentInfo mit Vererbungshierachie? 
 
 * google captcha in core with lamdas for json serialisierung/desserialsierung
 * drop konzept of Theme.KEY entirely? 
 
 * implement a template, that renders the form
 
 * bean-validation
 * fromBean, toBean
 * Spring integration
 
 
## Nüsse:

* Tabindex (OK)
* Wie kann man einen Fehler setzen? (z.B. ein FormularValidtorar... PW) (OK)
* Wie kann Captcha den Submit-Button ädnern? -> Es braucht einen modifizierten Submit-Button dafür. Also etwa: CatpachSubmit()


* Wie kann man mit einer Zeile ein ganzes Theme ändern? (OK)
* Wie bekommt man _wrapper_ oder neuandordnungen hin?
* Wie kann das Themening im Template aussehen? 
* Wie kann ein FormularRenderer die Anordnung der Inputs beeinflussen? 
* translation
* wie bekommt man die values raus?

* Evtl. sind diese Behaviours interessant? https://ci.apache.org/projects/wicket/guide/6.x/guide/advanced.html


 